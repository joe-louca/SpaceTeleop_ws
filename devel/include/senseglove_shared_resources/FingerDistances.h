// Generated by gencpp from file senseglove_shared_resources/FingerDistances.msg
// DO NOT EDIT!


#ifndef SENSEGLOVE_SHARED_RESOURCES_MESSAGE_FINGERDISTANCES_H
#define SENSEGLOVE_SHARED_RESOURCES_MESSAGE_FINGERDISTANCES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace senseglove_shared_resources
{
template <class ContainerAllocator>
struct FingerDistances_
{
  typedef FingerDistances_<ContainerAllocator> Type;

  FingerDistances_()
    : thumb_index(0.0)
    , thumb_middle(0.0)
    , thumb_ring(0.0)
    , thumb_pinky(0.0)  {
    }
  FingerDistances_(const ContainerAllocator& _alloc)
    : thumb_index(0.0)
    , thumb_middle(0.0)
    , thumb_ring(0.0)
    , thumb_pinky(0.0)  {
  (void)_alloc;
    }



   typedef float _thumb_index_type;
  _thumb_index_type thumb_index;

   typedef float _thumb_middle_type;
  _thumb_middle_type thumb_middle;

   typedef float _thumb_ring_type;
  _thumb_ring_type thumb_ring;

   typedef float _thumb_pinky_type;
  _thumb_pinky_type thumb_pinky;





  typedef boost::shared_ptr< ::senseglove_shared_resources::FingerDistances_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::senseglove_shared_resources::FingerDistances_<ContainerAllocator> const> ConstPtr;

}; // struct FingerDistances_

typedef ::senseglove_shared_resources::FingerDistances_<std::allocator<void> > FingerDistances;

typedef boost::shared_ptr< ::senseglove_shared_resources::FingerDistances > FingerDistancesPtr;
typedef boost::shared_ptr< ::senseglove_shared_resources::FingerDistances const> FingerDistancesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::senseglove_shared_resources::FingerDistances_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::senseglove_shared_resources::FingerDistances_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::senseglove_shared_resources::FingerDistances_<ContainerAllocator1> & lhs, const ::senseglove_shared_resources::FingerDistances_<ContainerAllocator2> & rhs)
{
  return lhs.thumb_index == rhs.thumb_index &&
    lhs.thumb_middle == rhs.thumb_middle &&
    lhs.thumb_ring == rhs.thumb_ring &&
    lhs.thumb_pinky == rhs.thumb_pinky;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::senseglove_shared_resources::FingerDistances_<ContainerAllocator1> & lhs, const ::senseglove_shared_resources::FingerDistances_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace senseglove_shared_resources

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::senseglove_shared_resources::FingerDistances_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::senseglove_shared_resources::FingerDistances_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::senseglove_shared_resources::FingerDistances_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::senseglove_shared_resources::FingerDistances_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::senseglove_shared_resources::FingerDistances_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::senseglove_shared_resources::FingerDistances_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::senseglove_shared_resources::FingerDistances_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7c9951a7d85c69ea7ca7247b7088916a";
  }

  static const char* value(const ::senseglove_shared_resources::FingerDistances_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7c9951a7d85c69eaULL;
  static const uint64_t static_value2 = 0x7ca7247b7088916aULL;
};

template<class ContainerAllocator>
struct DataType< ::senseglove_shared_resources::FingerDistances_<ContainerAllocator> >
{
  static const char* value()
  {
    return "senseglove_shared_resources/FingerDistances";
  }

  static const char* value(const ::senseglove_shared_resources::FingerDistances_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::senseglove_shared_resources::FingerDistances_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 thumb_index\n"
"float32 thumb_middle\n"
"float32 thumb_ring\n"
"float32 thumb_pinky\n"
;
  }

  static const char* value(const ::senseglove_shared_resources::FingerDistances_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::senseglove_shared_resources::FingerDistances_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.thumb_index);
      stream.next(m.thumb_middle);
      stream.next(m.thumb_ring);
      stream.next(m.thumb_pinky);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FingerDistances_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::senseglove_shared_resources::FingerDistances_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::senseglove_shared_resources::FingerDistances_<ContainerAllocator>& v)
  {
    s << indent << "thumb_index: ";
    Printer<float>::stream(s, indent + "  ", v.thumb_index);
    s << indent << "thumb_middle: ";
    Printer<float>::stream(s, indent + "  ", v.thumb_middle);
    s << indent << "thumb_ring: ";
    Printer<float>::stream(s, indent + "  ", v.thumb_ring);
    s << indent << "thumb_pinky: ";
    Printer<float>::stream(s, indent + "  ", v.thumb_pinky);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSEGLOVE_SHARED_RESOURCES_MESSAGE_FINGERDISTANCES_H
