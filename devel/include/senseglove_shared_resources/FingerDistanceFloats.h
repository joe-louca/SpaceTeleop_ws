// Generated by gencpp from file senseglove_shared_resources/FingerDistanceFloats.msg
// DO NOT EDIT!


#ifndef SENSEGLOVE_SHARED_RESOURCES_MESSAGE_FINGERDISTANCEFLOATS_H
#define SENSEGLOVE_SHARED_RESOURCES_MESSAGE_FINGERDISTANCEFLOATS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>

namespace senseglove_shared_resources
{
template <class ContainerAllocator>
struct FingerDistanceFloats_
{
  typedef FingerDistanceFloats_<ContainerAllocator> Type;

  FingerDistanceFloats_()
    : th_ff()
    , th_mf()
    , th_rf()
    , th_lf()  {
    }
  FingerDistanceFloats_(const ContainerAllocator& _alloc)
    : th_ff(_alloc)
    , th_mf(_alloc)
    , th_rf(_alloc)
    , th_lf(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float64_<ContainerAllocator>  _th_ff_type;
  _th_ff_type th_ff;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _th_mf_type;
  _th_mf_type th_mf;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _th_rf_type;
  _th_rf_type th_rf;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _th_lf_type;
  _th_lf_type th_lf;





  typedef boost::shared_ptr< ::senseglove_shared_resources::FingerDistanceFloats_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::senseglove_shared_resources::FingerDistanceFloats_<ContainerAllocator> const> ConstPtr;

}; // struct FingerDistanceFloats_

typedef ::senseglove_shared_resources::FingerDistanceFloats_<std::allocator<void> > FingerDistanceFloats;

typedef boost::shared_ptr< ::senseglove_shared_resources::FingerDistanceFloats > FingerDistanceFloatsPtr;
typedef boost::shared_ptr< ::senseglove_shared_resources::FingerDistanceFloats const> FingerDistanceFloatsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::senseglove_shared_resources::FingerDistanceFloats_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::senseglove_shared_resources::FingerDistanceFloats_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::senseglove_shared_resources::FingerDistanceFloats_<ContainerAllocator1> & lhs, const ::senseglove_shared_resources::FingerDistanceFloats_<ContainerAllocator2> & rhs)
{
  return lhs.th_ff == rhs.th_ff &&
    lhs.th_mf == rhs.th_mf &&
    lhs.th_rf == rhs.th_rf &&
    lhs.th_lf == rhs.th_lf;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::senseglove_shared_resources::FingerDistanceFloats_<ContainerAllocator1> & lhs, const ::senseglove_shared_resources::FingerDistanceFloats_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace senseglove_shared_resources

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::senseglove_shared_resources::FingerDistanceFloats_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::senseglove_shared_resources::FingerDistanceFloats_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::senseglove_shared_resources::FingerDistanceFloats_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::senseglove_shared_resources::FingerDistanceFloats_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::senseglove_shared_resources::FingerDistanceFloats_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::senseglove_shared_resources::FingerDistanceFloats_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::senseglove_shared_resources::FingerDistanceFloats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "645d53f7de8b68c040fc08d5668ceb96";
  }

  static const char* value(const ::senseglove_shared_resources::FingerDistanceFloats_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x645d53f7de8b68c0ULL;
  static const uint64_t static_value2 = 0x40fc08d5668ceb96ULL;
};

template<class ContainerAllocator>
struct DataType< ::senseglove_shared_resources::FingerDistanceFloats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "senseglove_shared_resources/FingerDistanceFloats";
  }

  static const char* value(const ::senseglove_shared_resources::FingerDistanceFloats_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::senseglove_shared_resources::FingerDistanceFloats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Float64 th_ff  # thumb to index finger\n"
"std_msgs/Float64 th_mf  # thumb to middle finger\n"
"std_msgs/Float64 th_rf  # thumb to ring finger\n"
"std_msgs/Float64 th_lf  # future when pink is on shadow hand\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
;
  }

  static const char* value(const ::senseglove_shared_resources::FingerDistanceFloats_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::senseglove_shared_resources::FingerDistanceFloats_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.th_ff);
      stream.next(m.th_mf);
      stream.next(m.th_rf);
      stream.next(m.th_lf);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FingerDistanceFloats_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::senseglove_shared_resources::FingerDistanceFloats_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::senseglove_shared_resources::FingerDistanceFloats_<ContainerAllocator>& v)
  {
    s << indent << "th_ff: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.th_ff);
    s << indent << "th_mf: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.th_mf);
    s << indent << "th_rf: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.th_rf);
    s << indent << "th_lf: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.th_lf);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSEGLOVE_SHARED_RESOURCES_MESSAGE_FINGERDISTANCEFLOATS_H
