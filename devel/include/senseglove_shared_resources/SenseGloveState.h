// Generated by gencpp from file senseglove_shared_resources/SenseGloveState.msg
// DO NOT EDIT!


#ifndef SENSEGLOVE_SHARED_RESOURCES_MESSAGE_SENSEGLOVESTATE_H
#define SENSEGLOVE_SHARED_RESOURCES_MESSAGE_SENSEGLOVESTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <senseglove_shared_resources/KinematicsVect3D.h>
#include <senseglove_shared_resources/KinematicsVect3D.h>

namespace senseglove_shared_resources
{
template <class ContainerAllocator>
struct SenseGloveState_
{
  typedef SenseGloveState_<ContainerAllocator> Type;

  SenseGloveState_()
    : header()
    , joint_names()
    , position()
    , absolute_velocity()
    , hand_position()
    , finger_tip_positions()  {
    }
  SenseGloveState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , joint_names(_alloc)
    , position(_alloc)
    , absolute_velocity(_alloc)
    , hand_position(_alloc)
    , finger_tip_positions(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _joint_names_type;
  _joint_names_type joint_names;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _position_type;
  _position_type position;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _absolute_velocity_type;
  _absolute_velocity_type absolute_velocity;

   typedef std::vector< ::senseglove_shared_resources::KinematicsVect3D_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::senseglove_shared_resources::KinematicsVect3D_<ContainerAllocator> >> _hand_position_type;
  _hand_position_type hand_position;

   typedef std::vector< ::senseglove_shared_resources::KinematicsVect3D_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::senseglove_shared_resources::KinematicsVect3D_<ContainerAllocator> >> _finger_tip_positions_type;
  _finger_tip_positions_type finger_tip_positions;





  typedef boost::shared_ptr< ::senseglove_shared_resources::SenseGloveState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::senseglove_shared_resources::SenseGloveState_<ContainerAllocator> const> ConstPtr;

}; // struct SenseGloveState_

typedef ::senseglove_shared_resources::SenseGloveState_<std::allocator<void> > SenseGloveState;

typedef boost::shared_ptr< ::senseglove_shared_resources::SenseGloveState > SenseGloveStatePtr;
typedef boost::shared_ptr< ::senseglove_shared_resources::SenseGloveState const> SenseGloveStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::senseglove_shared_resources::SenseGloveState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::senseglove_shared_resources::SenseGloveState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::senseglove_shared_resources::SenseGloveState_<ContainerAllocator1> & lhs, const ::senseglove_shared_resources::SenseGloveState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.joint_names == rhs.joint_names &&
    lhs.position == rhs.position &&
    lhs.absolute_velocity == rhs.absolute_velocity &&
    lhs.hand_position == rhs.hand_position &&
    lhs.finger_tip_positions == rhs.finger_tip_positions;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::senseglove_shared_resources::SenseGloveState_<ContainerAllocator1> & lhs, const ::senseglove_shared_resources::SenseGloveState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace senseglove_shared_resources

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::senseglove_shared_resources::SenseGloveState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::senseglove_shared_resources::SenseGloveState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::senseglove_shared_resources::SenseGloveState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::senseglove_shared_resources::SenseGloveState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::senseglove_shared_resources::SenseGloveState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::senseglove_shared_resources::SenseGloveState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::senseglove_shared_resources::SenseGloveState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ca87b488181e10549b08892cbeda5ca5";
  }

  static const char* value(const ::senseglove_shared_resources::SenseGloveState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xca87b488181e1054ULL;
  static const uint64_t static_value2 = 0x9b08892cbeda5ca5ULL;
};

template<class ContainerAllocator>
struct DataType< ::senseglove_shared_resources::SenseGloveState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "senseglove_shared_resources/SenseGloveState";
  }

  static const char* value(const ::senseglove_shared_resources::SenseGloveState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::senseglove_shared_resources::SenseGloveState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A message for senseglove data\n"
"Header header\n"
"\n"
"string[] joint_names\n"
"float32[] position\n"
"float32[] absolute_velocity\n"
"KinematicsVect3D[] hand_position\n"
"KinematicsVect3D[] finger_tip_positions\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: senseglove_shared_resources/KinematicsVect3D\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::senseglove_shared_resources::SenseGloveState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::senseglove_shared_resources::SenseGloveState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.joint_names);
      stream.next(m.position);
      stream.next(m.absolute_velocity);
      stream.next(m.hand_position);
      stream.next(m.finger_tip_positions);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SenseGloveState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::senseglove_shared_resources::SenseGloveState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::senseglove_shared_resources::SenseGloveState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "joint_names[]" << std::endl;
    for (size_t i = 0; i < v.joint_names.size(); ++i)
    {
      s << indent << "  joint_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.joint_names[i]);
    }
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "absolute_velocity[]" << std::endl;
    for (size_t i = 0; i < v.absolute_velocity.size(); ++i)
    {
      s << indent << "  absolute_velocity[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.absolute_velocity[i]);
    }
    s << indent << "hand_position[]" << std::endl;
    for (size_t i = 0; i < v.hand_position.size(); ++i)
    {
      s << indent << "  hand_position[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::senseglove_shared_resources::KinematicsVect3D_<ContainerAllocator> >::stream(s, indent + "    ", v.hand_position[i]);
    }
    s << indent << "finger_tip_positions[]" << std::endl;
    for (size_t i = 0; i < v.finger_tip_positions.size(); ++i)
    {
      s << indent << "  finger_tip_positions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::senseglove_shared_resources::KinematicsVect3D_<ContainerAllocator> >::stream(s, indent + "    ", v.finger_tip_positions[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSEGLOVE_SHARED_RESOURCES_MESSAGE_SENSEGLOVESTATE_H
